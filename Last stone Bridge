Algorithm Explained : https://www.youtube.com/watch?v=pJPzYBWBYS4&list=PLzsSZcqdlUAPnRCe5ZMLqYF9hLy6NOzmw&index=13

class Solution {
    public static int lastStoneWeight(int[] stones) {
        Arrays.sort(stones);
        int n = stones.length;
        for (int i = 0; i < stones.length / 2; i++)
           {
                int temp  = stones[i];
                stones[i] = stones[stones.length - 1 - i];
                stones[stones.length - 1 - i] = temp; 
           }
        if(n == 0) return stones[0];
        if(n == 1) return stones[0];
        
        while(n != 0 || n != 1 )
        {
            stones[0] =  stones[0] >= stones[1] ? stones[0] - stones[1] : stones[1] - stones[0];
            stones[1]=0;
            Arrays.sort(stones);
            for (int i = 0; i < stones.length / 2; i++)
        {   
                int temp  = stones[i];
                stones[i] = stones[stones.length - 1 - i];
                stones[stones.length - 1 - i] = temp; 
        }
                n--;
                if(n == 0) return stones[0];
                if(n == 1) return stones[0];
        }
        return stones[0];
    }
}
